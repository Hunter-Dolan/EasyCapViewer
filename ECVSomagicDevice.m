/* Copyright (c) 2013, Ben Trask
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
#import "ECVSomagicDevice.h"
#import "ECVDebug.h"

#define RECV(request, idx, val, ...) \
	do { \
		u_int8_t const expected[] = {__VA_ARGS__}; \
		u_int8_t data[] = {__VA_ARGS__}; \
		size_t const length = sizeof(expected); \
		if(![self readRequest:(request) value:(val) index:(idx) length:length data:data]) return; \
		if(memcmp(expected, data, length) != 0) ECVLog(ECVNotice, @"Line %d, read %04x: Expected %@, received %@", __LINE__, (idx), [NSData dataWithBytesNoCopy:(void *)expected length:length freeWhenDone:NO], [NSData dataWithBytesNoCopy:(void *)data length:length freeWhenDone:NO]); \
	} while(0)
#define SEND(request, idx, val, ...) \
	do { \
		u_int8_t data[] = {__VA_ARGS__}; \
		if(![self writeRequest:(request) value:(val) index:(idx) length:sizeof(data) data:data]) return; \
	} while(0)

enum {
	ECVSomagicLineEnd = 1 << 4,
	ECVSomagicVerticalBlanking = 1 << 5,
	ECVSomagicLowField = 1 << 6,
};

@implementation ECVSomagicDevice

#pragma mark -ECVSomagicDevice

- (BOOL)getStartOfRow:(out NSUInteger *const)outRow flags:(out UInt8 *const)outFlags withBytes:(UInt8 const *const)bytes length:(NSUInteger const)length
{
	for(NSUInteger i = 0; i < length; ++i) {
		switch(_hState) {
			case 0: if(0xff == bytes[i]) _hState++; else _hState = 0; break;
			case 1: if(0x00 == bytes[i]) _hState++; else _hState = 0; break;
			case 2: if(0x00 == bytes[i]) _hState++; else _hState = 0; break;
			case 3: if(0x00 != bytes[i] && !(ECVSomagicLineEnd & bytes[i])) { _hState++; _flags = bytes[i]; } else _hState = 0; break;
			case 4: _hState = 0; *outRow = i; *outFlags = _flags; return YES;
		}
	}
	return NO;
}
- (BOOL)getStartOfField:(out NSUInteger *const)outField flags:(out UInt8 *const)outFlags withBytes:(UInt8 const *const)bytes length:(NSUInteger const)length
{
	for(NSUInteger i = 0; i < length; ++i) {
		NSUInteger row;
		UInt8 flags;
		if(![self getStartOfRow:&row flags:&flags withBytes:bytes+i length:length-i]) return NO;
		i = row;
		switch(_vState) {
			case 0: if(ECVSomagicVerticalBlanking & flags) _vState++; break;
			case 1: if(!(ECVSomagicVerticalBlanking & flags)) {
				_vState = 0;
				*outField = row;
				*outFlags = flags;
				return YES;
			}
		}
	}
	return NO;
}
- (void)writePacketBytes:(UInt8 const *)bytes length:(NSUInteger)length toStorage:(ECVVideoStorage *const)storage
{
	if(!_signalLock) {
		NSUInteger i;
		UInt8 flags;
		if(![self getStartOfField:&i flags:&flags withBytes:bytes length:length]) return;
		bytes += i;
		length -= i;
		_signalLock = YES;
		[self pushVideoFrame:[storage finishedFrameWithNextFieldType:ECVSomagicLowField & flags ? ECVLowField : ECVHighField]];
		_offset = 0;
	}

	ECVIntegerSize const s = {720, [[self videoFormat] frameSize].height};
	OSType const pixelFormat = [self pixelFormat];
	NSUInteger const bytesPerRow = ECVPixelFormatBytesPerPixel(pixelFormat) * s.width + 8;
	NSUInteger const fieldLength = bytesPerRow * s.height;

	NSUInteger const remaining = fieldLength - _offset;
	NSUInteger const main = MIN(length, remaining);
	NSUInteger const extra = length - main;
	if(main) {
		ECVPointerPixelBuffer *const b1 = [[ECVPointerPixelBuffer alloc] initWithPixelSize:s bytesPerRow:bytesPerRow pixelFormat:pixelFormat bytes:bytes validRange:NSMakeRange(_offset, main)];
		[storage drawPixelBuffer:b1 atPoint:(ECVIntegerPoint){-8, 0}];
		[b1 release];
		_offset += main;
	}
	if(extra) {
		bytes += length-extra;
		length = extra;
		NSUInteger i = 0;
		UInt8 flags;
		if(![self getStartOfField:&i flags:&flags withBytes:bytes length:length]) {
			_signalLock = NO;
		} else {
			[self pushVideoFrame:[storage finishedFrameWithNextFieldType:ECVSomagicLowField & flags ? ECVLowField : ECVHighField]];
			_offset = 0;
		}
		[self writePacketBytes:bytes+i length:length-i toStorage:storage];
	}
}

#pragma mark -ECVCaptureDevice

- (id)initWithService:(io_service_t)service
{
	// Do nothing.
	return [super initWithService:service];
}

- (void)read
{
	_offset = 0;
	_signalLock = NO;
	_discard = 0;
	_flags = 0;
	_hState = 0;
	_vState = 0;
	if([[self videoSource] composite]) {
		// GET_DESCRIPTOR_FROM_DEVICE
		// GET_DESCRIPTOR_FROM_DEVICE
		// GET_DESCRIPTOR_FROM_DEVICE
		// SELECT_CONFIGURATION
		RECV(kUSBRqClearFeature, 0x0000, 0x0001, 0x01, 0x05);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x84, 0xb9, 0x4f, 0xb8, 0x71);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x84, 0xb9, 0x4f, 0xb8, 0x71);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x31, 0xa5, 0x00, 0x00, 0x50, 0x18, 0x85, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x31, 0xa5, 0xc8, 0x00, 0x50, 0x18, 0x85, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x80, 0x00, 0x50, 0x18, 0x85, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x00, 0x00, 0x50, 0x18, 0x85, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x34, 0x00, 0x00, 0x50, 0x18, 0x85, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x34, 0x05, 0x00, 0x50, 0x18, 0x85, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x34, 0x01, 0x00, 0x50, 0x18, 0x85, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x01, 0x00, 0x50, 0x18, 0x85, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x00, 0x00, 0x50, 0x18, 0x85, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x90, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x15, 0x00, 0x00, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x0d, 0x00, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x0d, 0x00, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xfc, 0x53, 0x1e, 0xb4, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xd1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xd1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe7, 0x51, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0xe7, 0x51, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xfc, 0x53, 0x1e, 0xb4, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xd1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xd1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe7, 0x51, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0xe7, 0x51, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xfc, 0x53, 0x1e, 0xb4, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xd1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xd1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x47, 0x59, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x47, 0x59, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x5c, 0x5b, 0x1e, 0xb4, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xb1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xb1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x47, 0x59, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x47, 0x59, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xb3, 0x58, 0x53, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xec, 0x5b, 0x1e, 0xb4, 0xb1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xec, 0x5b, 0x1e, 0xb4, 0xb1);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x47, 0x59, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x47, 0x59, 0x1e, 0xb4, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x08, 0x64, 0xf4, 0x87, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x08, 0x64, 0xf4, 0x87, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x01, 0x08, 0x8a, 0xed, 0xb6, 0x54, 0x80, 0x78);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x02, 0xc7, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x03, 0x33, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x04, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x05, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x06, 0xe9, 0xff, 0x2c, 0x5c, 0x54, 0x80, 0xcc);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x07, 0x0d, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x08, 0x98, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x09, 0x01, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0a, 0x80, 0xff, 0x2c, 0x5c, 0x54, 0x80, 0xcc);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0b, 0x40, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0c, 0x40, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0d, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x2c, 0x5c, 0x54, 0x80, 0xcc);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0f, 0x2a, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x10, 0x40, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x11, 0x0c, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x12, 0x01, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x13, 0x80, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x14, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x15, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x16, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x17, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x40, 0x02, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x58, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x59, 0x54, 0xff, 0x2c, 0x5c, 0x54, 0x80, 0xcc);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5a, 0x07, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5b, 0x03, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5e, 0x00, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x02, 0xc0, 0xb4, 0x00, 0x00, 0x00, 0x00, 0xd4);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x01, 0xb4, 0x00, 0x00, 0x00, 0x00, 0xd4);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0a, 0x80, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0b, 0x40, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0d, 0x00, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0c, 0x40, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x09, 0x01, 0x00, 0x00, 0x50, 0x18, 0x85, 0x67);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x02, 0xc0, 0x87, 0x00, 0x00, 0x00, 0x00, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x01, 0x87, 0x00, 0x00, 0x00, 0x00, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0x84, 0x00, 0x01, 0x40, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x85, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x00, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0x84, 0x00, 0x01, 0x5b, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x9d, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x00, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0x84, 0x00, 0x01, 0x10, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0xdf, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x40, 0x18, 0x85, 0x67, 0xf0, 0xdc, 0x9d, 0x20);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5a, 0x0a, 0x9d, 0x20, 0x49, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x59, 0x54, 0x9d, 0x20, 0x49, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5b, 0x83, 0x9d, 0x20, 0x49, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x10, 0x40, 0x9d, 0x20, 0x49, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x55, 0xff, 0x9d, 0x20, 0x49, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x41, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x42, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x43, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x44, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x45, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x46, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x47, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x48, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x49, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4a, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4b, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4c, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4d, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4e, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4f, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x50, 0x77, 0x00, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x51, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x52, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x53, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x54, 0x77, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0a, 0x80, 0x01, 0x01, 0x54, 0x77, 0xb8, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0b, 0x40, 0x01, 0x01, 0x54, 0x77, 0xb8, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0d, 0x00, 0x01, 0x01, 0x54, 0x77, 0xb8, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0c, 0x40, 0x01, 0x01, 0x54, 0x77, 0xb8, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x09, 0x01, 0x00, 0x00, 0x50, 0x18, 0x85, 0x67);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x20, 0x05, 0x4a, 0x8a, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x9a, 0x04, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x85, 0x01, 0x00, 0x00, 0x00, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x0001, 0x01, 0x05);
		// GET_DESCRIPTOR_FROM_DEVICE
		// SELECT_INTERFACE
		[self setAlternateInterface:2];
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x00, 0x50, 0x18, 0x85, 0x00);
	} else {
		// GET_DESCRIPTOR_FROM_DEVICE
		// GET_DESCRIPTOR_FROM_DEVICE
		// GET_DESCRIPTOR_FROM_DEVICE
		// SELECT_CONFIGURATION
		RECV(kUSBRqClearFeature, 0x0000, 0x0001, 0x01, 0x05);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x84, 0x39, 0x50, 0xb8, 0x71);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x84, 0x39, 0x50, 0xb8, 0x71);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x31, 0xa5, 0x00, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x31, 0xa5, 0xc8, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x80, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x00, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x34, 0x00, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x34, 0x05, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x34, 0x01, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x01, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x00, 0x33, 0x00, 0x00, 0xf0, 0xc9, 0x88, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x90, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x15, 0x00, 0x00, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x0d, 0x00, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x0d, 0x00, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xfc, 0xd3, 0xc4, 0xb3, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xa6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xa6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe7, 0xd1, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0xe7, 0xd1, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xfc, 0xd3, 0xc4, 0xb3, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xa6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xa6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe7, 0xd1, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0xe7, 0xd1, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xfc, 0xd3, 0xc4, 0xb3, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xa6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xa6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x47, 0xd9, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x47, 0xd9, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x5c, 0xdb, 0xc4, 0xb3, 0xf2);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xe4, 0x7a, 0x6e, 0x80, 0xc6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xe4, 0x7a, 0x6e, 0x80, 0xc6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x47, 0xd9, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x47, 0xd9, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0xb3, 0x58, 0x53, 0x80, 0xe8);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0xec, 0xdb, 0xc4, 0xb3, 0xc6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0xec, 0xdb, 0xc4, 0xb3, 0xc6);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x47, 0xd9, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x80, 0x47, 0xd9, 0xc4, 0xb3, 0x01);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3a, 0x80, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x00, 0x3b, 0x00, 0x27, 0x74, 0x6e, 0x80, 0x08);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x01, 0x08, 0x8a, 0xed, 0xb6, 0x54, 0x80, 0x28);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x02, 0xc7, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x03, 0x33, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x04, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x05, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x06, 0xe9, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x07, 0x0d, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x08, 0x98, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x09, 0x01, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0a, 0x80, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0b, 0x40, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0c, 0x40, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0d, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x81, 0xb8, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0f, 0x2a, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x10, 0x40, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x11, 0x0c, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x12, 0x01, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x13, 0x80, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x14, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x15, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x16, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x17, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x40, 0x02, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x58, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x59, 0x54, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5a, 0x07, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5b, 0x03, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5e, 0x00, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x02, 0xc7, 0xb3, 0x00, 0x00, 0x00, 0x00, 0xd4);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x01, 0xb3, 0x00, 0x00, 0x00, 0x00, 0xd4);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0a, 0x80, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0b, 0x40, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0d, 0x00, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0c, 0x40, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x09, 0x01, 0x00, 0x00, 0xf0, 0xc9, 0x88, 0x67);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x02, 0xc7, 0x87, 0x00, 0x00, 0x00, 0x00, 0x50);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0e, 0x01, 0x87, 0x00, 0x00, 0x00, 0x00, 0x50);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0x84, 0x00, 0x01, 0x40, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x88, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x00, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0x84, 0x00, 0x01, 0x5b, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x8b, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x00, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0x84, 0x00, 0x01, 0x10, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x23, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xa0, 0x00, 0x01, 0x40, 0xc9, 0x88, 0x67, 0xa0, 0x22, 0x8b, 0x48);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5a, 0x0a, 0x8b, 0x48, 0x5a, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x59, 0x54, 0x8b, 0x48, 0x5a, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x5b, 0x83, 0x8b, 0x48, 0x5a, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x10, 0x40, 0x8b, 0x48, 0x5a, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x55, 0xff, 0x8b, 0x48, 0x5a, 0x0b, 0x01, 0x0b);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x41, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x42, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x43, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x44, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x45, 0x77, 0xff, 0x2c, 0x5c, 0x54, 0x80, 0xcc);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x46, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x47, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x48, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x49, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4a, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4b, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4c, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4d, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4e, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x4f, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x50, 0x77, 0xff, 0x2c, 0x5c, 0x54, 0x80, 0xcc);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x51, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x52, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x53, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x54, 0x77, 0xff, 0x02, 0x01, 0x00, 0x00, 0x10);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0a, 0x80, 0x01, 0x01, 0x54, 0x77, 0xff, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0b, 0x40, 0x01, 0x01, 0x54, 0x77, 0xff, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0d, 0x00, 0x01, 0x01, 0x54, 0x77, 0xff, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x0c, 0x40, 0x01, 0x01, 0x54, 0x77, 0xff, 0x02);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x4a, 0xc0, 0x01, 0x01, 0x09, 0x01, 0x00, 0x00, 0xf0, 0xc9, 0x88, 0x67);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x24, 0xbd, 0x54, 0x80, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x24, 0xbd, 0x54, 0x80, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x20, 0x05, 0x4a, 0x8a, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x6c, 0x03, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x88, 0x01, 0x00, 0x00, 0x00, 0x00);
		RECV(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x20, 0x82, 0x01, 0x30, 0x80, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00);
		SEND(kUSBRqClearFeature, 0x0000, 0x0001, 0x01, 0x05);
		// GET_DESCRIPTOR_FROM_DEVICE
		// SELECT_INTERFACE
		[self setAlternateInterface:2];
		SEND(kUSBRqClearFeature, 0x0000, 0x000b, 0x0b, 0x00, 0x00, 0x82, 0x01, 0x17, 0x40, 0x00, 0x00, 0xf0, 0xc9, 0x88, 0x00);
	}
	[super read];
	[self setAlternateInterface:0];
}
- (void)writeBytes:(UInt8 const *const)bytes length:(NSUInteger const)length toStorage:(ECVVideoStorage *const)storage
{
	if(_discard < 724*263*2*20) {
		_discard += length;
		return;
	}
	NSUInteger const packetLength = 1024;
	NSUInteger const headerLength = 4;
	for(NSUInteger i = headerLength; i < length; i += packetLength) {
		// TODO: Check for 0xaa00 header?
		[self writePacketBytes:bytes+i length:MIN(length-i, packetLength-headerLength) toStorage:storage];
	}
}

#pragma mark -ECVCaptureDevice(ECVAbstract)

- (UInt32)maximumMicrosecondsInFrame
{
	return kUSBHighSpeedMicrosecondsInFrame;
}
- (NSArray *)supportedVideoSources
{
	return [NSArray arrayWithObjects:
		[ECVGenericVideoSource_SVideo source],
		[ECVGenericVideoSource_Composite source],
		nil];
}
- (ECVVideoSource *)defaultVideoSource
{
	return [ECVGenericVideoSource_Composite source];
}
- (NSSet *)supportedVideoFormats
{
	return [NSSet setWithObjects:
		[ECVVideoFormat_NTSC_M format],
		[ECVVideoFormat_PAL_BGDHI format], // TODO: This is completely untested and a hell of an assumption, but from the report I received, this device does not need any special callibration for the video format.
		nil];
}
- (ECVVideoFormat *)defaultVideoFormat
{
	return [ECVVideoFormat_NTSC_M format];
}
- (OSType)pixelFormat
{
	return k2vuyPixelFormat;
}

@end
